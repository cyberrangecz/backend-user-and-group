## server port for a given service, e.g., 8084
server.port=8084
## server context path (the base url for the service), e.g., /kypo2-rest-user-and-group/api/v1
server.servlet.context-path=/kypo2-rest-user-and-group/api/v1
## microservice name which is used for identification of this service, e.g., kypo2-user-and-group
service.name=kypo2-user-and-group

# OpenID Connect MUNI OIDC configuration settings for a resource server configuration
## OIDC issuer, e.g. MUNI OIDC or proprietary OIDC authorization server, e.g., https://oidc.muni.cz/oidc/
kypo.muni.idp.4oauth.issuer={OIDC issuer URI}
## the address of authorization server where the resource service is checking incoming token from a client, e.g. https://oidc.muni.cz/oidc/introspect
kypo.muni.idp.4oauth.introspectionURI={URL to authorization server introspect endpoint}
## the identification of a resource service using client ID
kypo.muni.idp.4oauth.resource.clientId={your client ID from Self-service protected resource}
## the identification of a resource service using client secret
kypo.muni.idp.4oauth.resource.clientSecret={your client secret from Self-service protected resource}

# OpenID Connection MUNI OIDC configuration settings for a client configuration
## the address of authorization server where the client is getting a token, e.g., https://oidc.muni.cz/oidc/authorize
kypo.muni.idp.4oauth.authorizationURI={URL to authorization server authorize endpoint}
## the identification of client using his client ID
kypo.muni.idp.4oauth.client.clientId={your client ID from Self-service client}
## the scopes that authorization server will provide for a given user, e.g., openid, profile, email
kypo.muni.idp.4oauth.scopes=openid, profile, email

# OpenID Connect Proprietary Mitre OIDC configuration settings for a resource server configuration
## OIDC issuer, e.g. MUNI OIDC or proprietary OIDC authorization server, e.g., https://localhost:8080/oidc/
kypo.mitre.idp.4oauth.issuer={OIDC issuer URI}
## the address of authorization server where the resource service is checking incoming token from a client, e.g. https://localhost:8080/oidc/introspect
kypo.mitre.idp.4oauth.introspectionURI={URL to authorization server introspect endpoint}
## the identification of a resource service using client ID
kypo.mitre.idp.4oauth.resource.clientId={your client ID from Self-service protected resource}
## the identification of a resource service using client secret
kypo.mitre.idp.4oauth.resource.clientSecret={your client secret from Self-service protected resource}

# OpenID Connection Proprietary Mitre OIDC configuration settings for a client configuration
## the address of authorization server where the client is getting a token, e.g., https://localhost:8080/oidc/authorize
kypo.mitre.idp.4oauth.authorizationURI={URL to authorization server authorize endpoint}
## the identification of client using his client ID
kypo.mitre.idp.4oauth.client.clientId={your client ID from Self-service client}
## the scopes that authorization server will provide for a given user, e.g., openid, profile, email
kypo.mitre.idp.4oauth.scopes=openid, profile, email

# Datasource configuration
## URL to the database, e.g., jdbc:postgresql://localhost:5432/training
spring.datasource.url={database URL including port and database table name}
## username in DB, e.g., postgres
spring.datasource.username={user in DB}
## password in DB, e.g., postgres
spring.datasource.password={password for user in DB}

# Java Persistence API settings
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false
## database platform (MySQL, PostgtreSQL etc.), e.g., org.hibernate.dialect.PostgreSQL9Dialect
spring.jpa.database-platform={database dialect}
## influence how the schema tool management will manipulate the database schema at startup, e.g., validate or none for production purposes
spring.jpa.hibernate.ddl-auto=validate
## show sql in console/file etc. that are invoked, e.g., false or true
spring.jpa.show-sql=true
## possibility to format shown sql commands, if false it is shown in one line if true it is on more lines
spring.jpa.properties.hibernate.format_sql=false

# Logging
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate=ERROR
logging.level.org.mitre.openid.connect.binder.service=DEBUG

# spring-cloud
spring.cloud.refresh.enabled = false
## disables the settings in application.properties in resource folder
spring.jmx.enabled=false
## Configuring Jackson serializer for converting Java 8 dates to ISO format
spring.jackson.serialization.write_dates_as_timestamps=false 
## all atributes in JSON are in SNAKE_CASE
spring.jackson.property-naming-strategy=SNAKE_CASE

# HTTPS and CA
## the requirement for ssl, e.g., true
security.require-ssl={ssl requirement}
## the format used for the KeyStore, e.g. PKCS12
server.ssl.key-store-type={the format used for the KeyStore}
## path to KeyStore, e.g., /etc/ssl/kypo2-keystore.p12
server.ssl.key-store={path to KeyStore}
## password used when generate KeyStore , e.g., changeit
server.ssl.key-store-password={password used when generate KeyStore}
## alias of KeyStore, e.g., kypo2-keystore
server.ssl.key-alias={alias of KeyStore}
## path to TrustStore, e.g., default for Java app is in JDK $JAVA_HOME/lib/security/cacerts
server.ssl.trust-store={path to TrustStore}
## password to TrustStore, e.g., default for cacerts is changeit
server.ssl.trust-store-password={password to TrustStore}
## the format used for the TrustStore, e.g, JKS
server.ssl.trust-store-type={the format used for the TrustStore}

## path to YAML file with initial users and roles for user-and-group microservice, e.g., /etc/kypo2/user-services.yml
path.to.file.with.initial.users.and.services={path to YAML file with initial users and roles}
