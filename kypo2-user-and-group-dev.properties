## server port for a given service, e.g., 8084
server.port=8084
## server context path (the base url for the service), e.g., /kypo2-rest-user-and-group/api/v1
server.servlet.context-path=/kypo2-rest-user-and-group/api/v1
## microservice name which is used for identification of this service, e.g., kypo2-user-and-group
service.name=kypo2-user-and-group

## Allows you to specify allowed origins for CORS mapping. You could set it as, e.g., http://domain1.com, http://domain2.com, etc. The default value is: *
cors.allowed.origins={CORS allowed origins}

## Allows enable or disable swagger-ui.html page, e.g., true (on production environments it is recommended to set it to false)
swagger.enabled={swagger enabled}

# OpenID Connect OIDC configuration settings for a resource servers configuration
# Add configuration values for your OIDC providers. If you want to run application properly, make sure that all values are in the same order.
# First OIDC provider is used for authorization in swagger page
## OIDC issuers, e.g. MUNI OIDC and another proprietary OIDC authorization server, e.g., https://oidc.muni.cz/oidc/, https://kypo-oidc-idp.cz/oidc/
kypo.idp.4oauth.issuers={OIDC issuer URIs}
## the addresses of authorization servers where the resource service is checking incoming token from a client based on iss field in token, e.g. https://oidc.muni.cz/oidc/introspect, https://kypo-oidc-idp.cz/oidc/introspect
kypo.idp.4oauth.introspectionURIs={URLs to authorization servers introspect endpoint}
## the identification of a resource service using client IDs
kypo.idp.4oauth.resource.clientIds={your client IDs from Self-service protected resource}
## the identification of a resource service using client secrets
kypo.idp.4oauth.resource.clientSecrets={your client secrets from Self-service protected resource}

# OpenID Connection MUNI OIDC configuration settings for a client configuration
## the addresses of authorization servers where the client is getting a token, e.g., https://oidc.muni.cz/oidc/authorize, https://kypo-oidc-idp.cz/oidc/authorize
kypo.idp.4oauth.authorizationURIs={URLs to authorization server authorize endpoint}
## the identification of client using his client IDs
kypo.idp.4oauth.client.clientIds={your client IDs from Self-service client}
## the scopes that authorization servers will provide for a given user, e.g., openid, profile, email
kypo.idp.4oauth.scopes=openid, profile, email

# DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.url=jdbc:h2:mem:user-and-group
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driverClassName=org.h2.Driver

# JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)
spring.data.jpa.repositories.enabled=true
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false

# spring-cloud
spring.cloud.refresh.enabled = false
## disables the settings in application.properties in resource folder
spring.jmx.enabled=false
## Configuring Jackson serializer for converting Java 8 dates to ISO format
spring.jackson.serialization.write_dates_as_timestamps=false 
## all atributes in JSON are in SNAKE_CASE
spring.jackson.property-naming-strategy=SNAKE_CASE

## the requirement for ssl, e.g., false
security.require-ssl=false
management.health.refresh.enabled=false

## overwrite default logback configuration file, e.g., /etc/kypo/logback.xml, NOT REQUIRED
#logging.config={path to logback config file}
## set logger levels using pattern logging.level.<logger-name>=<level>, NOT REQUIRED
logging.level.cz.muni.ics=WARN
